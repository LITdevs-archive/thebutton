<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <link rel="preconnect" href="https://fonts.gstatic.com" />
    <style>
		html, body {
    margin: 0;
    padding: 0;
    width: 100%;
}

body {
    background: linear-gradient(120deg, #324746, #45414E);
    background-size: cover;
    overflow: hidden;
    font-family: sans-serif;
    transition-duration: 150ms;
}

button {
    position: absolute;
    top: 60%;
    left: 50%;
    transform: translate(-50%, -50%);
}

.button-alt {
	transform: translate(-50%, 70%) !important;
}

button {
    background: none;
    color: #ccc;
    width: 220px;
    height: 70px;
    border: 1px solid <% if(isAlive) { %>#338033<% } else { %>#c2001a<% } %>;
    font-size: 18px;
    border-radius: 4px;
    transition: .6s;
    overflow: hidden;
}

button:focus {
    outline: none;
}

button:before {
    content: '';
    display: block;
    position: absolute;
    background: rgba(255, 255, 255, .5);
    width: 60px;
    height: 100%;
    left: 0;
    top: 0;
    opacity: .5s;
    filter: blur(30px);
    transform: translateX(-130px) skewX(-15deg);
}

button:after {
    content: '';
    display: block;
    position: absolute;
    background: rgba(255, 255, 255, .2);
    width: 30px;
    height: 100%;
    left: 30px;
    top: 0;
    opacity: 0;
    filter: blur(30px);
    transform: translate(-100px) scaleX(-15deg);
}

button:hover {
    background: <% if(isAlive) { %>#338033<% } else { %>#c2001a<% } %>;
    cursor: pointer;
}

button:hover:before {
    transform: translateX(300px) skewX(-15deg);
    opacity: .6;
    transition: .7s;
}

button:hover:after {
    transform: translateX(300px) skewX(-15deg);
    opacity: .6;
    transition: .7s;
}

box-lol {
    position: absolute;
    top: 60%;
    left: 50%;
    background: none;
    color: #ccc;
    width: 220px;
    height: 70px;
    border: 1px solid <% if(isAlive) { %>#338033<% } else { %>#c2001a<% } %>;
    font-size: 18px;
    border-radius: 4px;
    transition: .6s;
    overflow: hidden;
}

.bar {
	background-color: green;
	width: <%=healthNumber %>px;
	height: 20px;
	border-radius: 5px;
	margin-top: 3em;
	margin-bottom: 1em;
}

.bar-align {
	margin-top: 10%;
	display: flex;
	justify-content: center;
  	align-items: center;
}
	</style>
    <title>The Button</title>
</head>
<body>
    <div class="container-1">
        <div class="container-bar">
            <div class="bar-align">
				<div class="bar" id="bar">
				</div>
			</div>
        </div>
        <div class="container-btn">
            <div class="wrapper">
                <div class="btn">
					<form action="/" method="POST">
					<%- captcha%>
					<button type='submit' disabled id="submitButton">Click here to heal</button><br/>
				</form> 
					<% if(userRank) { %>
						<a href="<%=discordUrl %>"><button type='submit' class="button-alt" id="submitButton">Claim your <%=userRank %> rank on Discord.</button></a><br/>
					<% } %>
				
                </div>
				
            </div>
        </div>
    </div>
</body>
<script>
	function cb(token) {
		/*
		I would like to note that this isn't designed by me. 
		I took it off the example project of the node package, it seems a bit silly to me.
		Surely there is a better way, but it works so I'll stick with it.
		Ok I made some small edits to it, but it is still quite stupid.
		- Skelly
		*/
		const ranks = [
		{
			name: "Absolute Noob",
			color: "#338033"
		},
		{
			name: "Kind of a cool person",
			color: "#6e8033"
		},
		{
			name: "Cool person",
			color: "#b3a100"
		},
		{
			name: "MEDIC",
			color: "#db9a00"
		},
		{
			name: "Saviour",
			color: "#db5b00"
		},
		{
			name: "h",
			color: "#c2001a"
		},
		{
			name: "dead",
			color: "#000000"
		}
		]

		function roleNameToHex(roleName) {
			ranks.forEach(rank => {
				if (rank.name === roleName) {
					return rank.color
				}
			})
		}

		var input = document.createElement('input'); 
		input.style.display = "none"
		input.setAttribute('type', 'text');
		input.setAttribute('name', 'g-recaptcha-response');
		input.setAttribute('value', token);
		document.getElementsByTagName('form')[0].appendChild(input);
		document.getElementById("submitButton").disabled = <%=!isAlive %>;
		document.getElementById("bar").style.backgroundColor = roleNameToHex("<%=health %>");
		setInterval(() => {
			console.log("getting new health");
			fetch('/health')
				.then(response => response.json())
				.then(data => {
					document.getElementById("submitButton").disabled = !data.isAlive;
					document.getElementById("bar").style.width = `${data.health}px`;
					document.getElementById("bar").style.backgroundColor = roleNameToHex(data.healthLevel);
					if (!data.isAlive) {
						location.reload()
					}
					console.log("new health is " + data.health)
				});
		}, 6000)
		setTimeout(() => {
			location.reload()
		}, 120000)
	}
</script>
</html>
